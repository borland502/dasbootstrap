---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  # no_log: "{{ molecule_no_log }}"
  vars_files:
    - /etc/ansible/global_vars/all.yaml
    # variable names lifted directly from [ansible-role-proxmox-create-lxc/defaults](https://github.com/UdelaRInterior/ansible-role-proxmox-create-lxc/blob/master/defaults/main.yml)
    - /etc/ansible/global_vars/pve.yaml
  vars:
    molecule_inventory:
      all:
        hosts: {}
        molecule: {}    
  pre_tasks:

  tasks:     

    - name: Create the container
      community.general.proxmox:
        node: "{{ proxmox.node }}"
        api_host: "{{ proxmox.uri }}"
        api_user: "{{ proxmox.user | default(omit) }}"
        api_password: "{{ proxmox.pass | default(omit) }}"
        validate_certs: "{{ pve_validate_certs | default(omit) }}"
        hookscript: "{{ pve_lxc_hookscript | default(omit) }}"
        ostemplate: "{{ proxmox.templates[pve_platform.distro] }}"
        hostname: "{{ pve_platform.name }}"
        vmid: "{{ proxmox.vm_id | default(omit) | int }}"
        description: "{{ pve_lxc_description | default(omit) }}"
        password: "{{ default_password }}"
        pubkey: "{{ pve_lxc_root_authorized_pubkey | default(omit) }}"
        cores: "{{ pve_lxc_cpu_cores | default(omit) }}"
        cpus: "{{ pve_lxc_cpu_limit | default(omit) }}"
        cpuunits: "{{ pve_lxc_cpu_units | default(omit) }}"
        memory: "{{ pve_lxc_memory | default(omit) }}"
        swap: "{{ pve_lxc_swap | default(omit) }}"
        storage: "{{ pve_lxc_storage | default(omit) }}"
        disk: "{{ pve_lxc_disk | default(omit) }}"
        mounts: >-
          {   {%- for item in pve_lxc_mounts -%}
                "{{ item.id }}":"{{ item.storage|default('local-lvm') }}:{{ item.size|default(32) }},mp={{ item.mount_point|default('/mnt/mp0') }},{% if item.acl is defined %}{% if (item.acl) %}acl=1{% else %}acl=0{% endif %},{% endif %}{% if item.quota is defined and item.quota %}quota=1,{% endif %}{% if item.read_only is defined and item.read_only %}ro=1,{% endif %}{% if item.backup is defined and item.backup %}backup=1,{% endif %}{% if item.skip_replication is defined and item.skip_replication %}replicate=0{% endif %}",
              {%- endfor -%}  }
        netif: >-
          {   {%- for item in pve_platform.pve_lxc_net_interfaces -%}
                "{{ item.id }}":"name={{ item.name }},bridge={{ item.bridge }},{% if (item.hwaddr is defined) %}hwaddr={{ item.hwaddr }},{% endif %}{% if (item.ip is defined) %}ip={{ item.ip }},{% endif %}{% if (item.gw4 is defined) %}gw={{ item.gw4 }},{% endif %}{% if (item.ip6 is defined) %}ip6={{ item.ip6 }},{% endif %}{% if (item.gw6 is defined) %}gw6={{ item.gw6 }},{% endif %}{% if (item.firewall is defined and item.firewall) %}firewall=1,{% endif %}{% if (item.rate_limit is defined) %}rate={{ item.rate_limit }},{% endif %}{% if (item.vlan_tag is defined) %}tag={{ item.vlan_tag }}{% endif %}",
              {%- endfor -%}  }
        nameserver: "{{ pve_lxc_nameserver | default(omit) }}"
        searchdomain: "{{ pve_lxc_searchdomain | default(omit) }}"
        onboot: "{{ pve_onboot | default(omit) }}"
        unprivileged: "{{ pve_lxc_unprivileged | default(omit) }}"
        features: "{{ pve_lxc_features | default(omit) }}"
        timeout: "{{ pve_lxc_timeout | default(omit) }}"
        force: "{{ pve_lxc_force | default(omit) }}"
      register: pve_lxc_container_created
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        loop_var: pve_platform     

    - name: Start a new lxc container in proxmox
      community.general.proxmox:
        vmid: "{{ container.vmid | int }}"
        node: "{{ proxmox.node }}"
        api_host: "{{ proxmox.uri }}"
        api_user: "{{ proxmox.user }}"
        api_password: "{{ proxmox.pass }}"
        state: started
      register: containers
      loop: "{{ pve_lxc_container_created.results }}"
      loop_control:
        loop_var: container

    - name: Fail if container has not started
      when: >
        item.changed is true and 
        item.msg is match(".*started")
      community.general.proxmox_vm_info:
        vmid: "{{ item.container.vmid | int }}"
        node: "{{ proxmox.node }}"
        api_host: "{{ proxmox.uri }}"
        api_user: "{{ proxmox.user }}"
        api_password: "{{ proxmox.pass }}"
      loop: "{{ containers.results }}"
      register: pve_status

    # Provide required inventory parameters, but also extend them to include integration test vars
    - name: Add container to molecule_inventory
      vars:
        inventory_partial_yaml: |
          all:
            children:
              molecule:
                hosts:
                  "{{ item.name }}":
                    ansible_ssh_user: root
                    ansible_ssh_host: "{{ item.pve_lxc_net_interfaces[0].ip | split('/') | first }}"
                    ansible_pkg_mgr: "{{ pve_lxc_package_mgr }}"
                    ansible_os_family: "{{ pve_lxc_os_family }}"
                    ansible_distribution: "{{ pve_lxc_distribution }}"
                    ansible_distribution_major_version: "{{ pve_lxc_major_version }}"
                    ansible_distribution_file_variety: "{{ pve_lxc_file_variety }}"
                    instance: "{{ item.name }}"
                    address: "{{ item.pve_lxc_net_interfaces[0].ip | split('/') | first }}"
                    
      ansible.builtin.set_fact:
        molecule_inventory: >
          {{ molecule_inventory | combine(inventory_partial_yaml | from_yaml, recursive=true) }}
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        label: "{{ item.name }}"  

    # - name: Debug
    #   ansible.builtin.debug:
    #     var: item
    #   loop: "{{ molecule_yml.platforms }}"
    #   loop_control:
    #     label: "{{ item.name }}"  

    # - name: Create ssh config file for molecule login
    #   community.general.ssh_config:
    #     host: "{{ item.name }}"
    #     hostname: "{{ item.pve_lxc_net_interfaces[0].ip | split('/') | first }}"
    #     user: root

    #   loop: "{{ molecule_yml.platforms }}"
    #   loop_control:
    #     label: "{{ item.name }}"  

    - name: Dump molecule_inventory
      ansible.builtin.copy:
        content: |
          {{ molecule_inventory | to_yaml }}
        dest: "{{ molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
        mode: "0600"

    - name: Force inventory refresh
      ansible.builtin.meta: refresh_inventory

    - name: Fail if molecule group is missing
      ansible.builtin.assert:
        that: "'molecule' in groups"
        fail_msg: |
          molecule group was not found inside inventory groups: {{ groups }}
      run_once: true # noqa: run-once[task]
      
# we want to avoid errors like "Failed to create temporary directory"
- name: Validate that inventory was refreshed
  hosts: molecule
  remote_user: root
  gather_facts: false
  tasks:
    - name: pve_lxc wait for connection
      ansible.builtin.wait_for_connection:
        delay: 3
        sleep: 3
        timeout: "{{ pve_lxc_wait_for_connection_timeout | default(60) }}"
      remote_user: "{{ pve_lxc_wait_for_connection_remote_user | default('root') }}"
