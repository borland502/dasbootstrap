[tool.poetry]
  authors = ["Jeremy Hettenhouser <jhettenh@gmail.com>"]
  description = "System installer for an ansible control node"
  license = "MIT"
  name = "dasbootstrap"
  packages = [
    { include = "dasbootstrap/technitium_client", from = "bases" },
    { include = "dasbootstrap/chrome_kiosk", from = "bases" },
    { include = "dasbootstrap/automation_station", from = "bases" },
    { include = "dasbootstrap/semaphore_client", from = "bases" },
    { include = "dasbootstrap/dasbootstrap", from = "bases" },
    { include = "dasbootstrap/proximate_utils", from = "bases" },
    { include = "dasbootstrap/trapper_keeper", from = "components" },
    { include = "dasbootstrap/ssh", from = "components" },
    { include = "dasbootstrap/ansible", from = "components" },
    { include = "dasbootstrap/resources", from = "components" },
    { include = "dasbootstrap/keegen", from = "components" },
    { include = "dasbootstrap/inventory", from = "components" },
  ]
  readme = "README.md"
  repository = "https://github.com/borland502/dasbootstrap"
  version = "0.2.4"

  # https://github.com/cod3licious/pubvis/blob/f3559f6b906d24d2104e0808dd5749dce6e02360/pyproject.toml#L36

[tool.pyright]
  extraPaths = ["bases", "components"]

[tool.bandit]
  exclude_dirs = [
    ".eggs",
    ".git",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    "tests",
    "__pypackages__",
    "__pycache__",
    "build",
    "dist",
  ]

[tool.ruff]
  indent-width = 2
  line-length = 128
  target-version = "py312"

  exclude = [
    ".eggs",
    ".git",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".venv",
    "tests",
    "__pypackages__",
    "__pycache__",
    "build",
    "dist",
  ]

  lint.ignore = [
    "C901",
    "PLR0912",
    "D104",
    "D203",
    "D213",
    "E501",
    "PGH003",
    "RET504",
    "S101",
    "S307",
    "D205",
    "ISC001",
    "E111",
    "N999",    # Streamlit modules violate module naming conventions
  ]
  lint.ignore-init-module-imports = true
  lint.select = [
    "A",
    "ASYNC",
    "B",
    "C4",
    "C90",
    "D",
    "DTZ",
    "E",
    "F",
    "FLY",
    "I",
    "ISC",
    "LOG",
    "N",
    "NPY",
    "PERF",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "Q",
    "RET",
    "RUF",
    "RSE",
    "SIM",
    "TID",
    "UP",
    "W",
    "YTT",
  ]
  lint.unfixable = ["F401", "F841"]

[tool.ruff.format]
  line-ending = "lf"

[tool.ruff.lint.pydocstyle]
  convention = "google"

[tool.ruff.lint.isort]
  section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "tests",
    "local-folder",
  ]

[tool.ruff.lint.isort.sections]
  "tests" = ["test"]

[tool.pytest.ini_options]
  addopts = "--color=yes --doctest-modules --exitfirst --failed-first --verbosity=5 --junitxml=reports/pytest.xml"
  filterwarnings = [
    'ignore:AnsibleCollectionFinder has already been configured',
  ]
  markers = ["slow"]
  minversion = "6.0"
  norecursedirs = [".venv", "lib", "build", "dist"]
  testpaths = ["test"]

[tool.poetry.plugins]

[tool.coverage.report] # https://coverage.readthedocs.io/en/latest/config.html#report
  precision = 1
  show_missing = true
  skip_covered = true

[tool.coverage.run] # https://coverage.readthedocs.io/en/latest/config.html#run
  branch = true
  command_line = "--module pytest"
  data_file = "reports/.coverage"
  source = ["bases/**/*", "components/**/*"]

[tool.coverage.xml] # https://coverage.readthedocs.io/en/latest/config.html#xml
  output = "reports/coverage.xml"

[tool.poetry.dependencies]
  ansible = "9.1.0"
  ansible-lint = { version = "6.22.1", markers = "platform_system != 'Windows'" }
  ansible-runner = "^2.3.6"
  boltdb = "^0.0.2"
  coloredlogs = ">=15.0.1"
  docker = "^7.0.0"
  faker = "^26.0.0"
  filelock = "^3.15.4"
  gunicorn = ">=21.2.0"
  httpx = "^0.27.0"
  ipaddr = "^2.2.0"
  mockito = "^1.5.0"
  pandas = "^2.2.2"
  paramiko = "^3.4.0"
  pass-import = "^3.5"
  passlib = "^1.7.4"
  pexpect = "4.9.0"
  playwright = "^1.41.2"
  plumbum = "^1.8.2"
  proxmoxer = "2.0.1"
  pyautogui = "^0.9.54"
  pydantic = "^2.8.2"
  pydig = "^0.4.0"
  pykeepass = "^4.1.0"
  pynput = "^1.7.6"
  python = "^3.12"
  python-nmap = "^0.7.1"
  python3-nmap = "^1.6.0"
  pyyaml = "^6.0.1"
  requests = "^2.31.0"
  semaphore-api = "2.9.45"
  sqlite-utils = "^3.36"
  sshconfig = "^2.2"
  streamlit = "^1.36.0"
  streamlit-extras = "^0.4.3"
  strip-ansi = "^0.1.1"
  tdnss = "^0.2.1"
  typer = "^0.12.3"
  types-python-nmap = "^0.7.1.20240106"
  undetected-playwright = "^0.3.0"
  urllib3 = "<2.1.0"
  uvicorn = { extras = ["standard"], version = ">=0.29.0" }
  wheel = "0.42.0"
  xdg-base-dirs = "^6.0.1"
  xkcdpass = "^1.19.9"
  zstandard = "^0.22.0"
scp = "^0.15.0"
toml = "^0.10.2"
cachebox = "^3.4.0"
netaddr = "^1.3.0"
sqlalchemy = "^2.0.31"
configparser = "^7.0.0"
six = "^1.16.0"
systemd = "^0.17.1"
icecream = "^2.1.3"

[tool.poetry.group.dev.dependencies]
  bandit = "^1.7.8"
  faker = "^26.0.0"
  mockito = "^1.5.0"
  molecule = "6.0.3"
  molecule-containers = "^2.0.0"
  molecule-plugins = { extras = ["docker"], version = "^23.5.0" }
  paramiko = "3.4.0"
  pre-commit = ">=3.7.0"
  pyright = "^1.1.358"
  pyspnego = { extras = ["kerberos"], version = "0.10.2" }
  pytest = "^8.2.2"
  pytest-ansible = "^24.1.2"
  pytest-docker = "^3.1.1"
  pytest-mock = ">=3.14.0"
  pytest-srcpaths = "^1.2.1"
  pytest-xdist = ">=3.5.0"
  pyupgrade = "^3.15.2"
  sansldap = "0.1.0"


[build-system]
  build-backend = "poetry.core.masonry.api"
  requires = ["poetry-core"]
