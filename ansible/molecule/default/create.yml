---

- name: Invoke common play
  ansible.builtin.import_playbook: common.yaml

# - name: Create
#   hosts: localhost
#   connection: local
#   gather_facts: false
#   # no_log: "{{ molecule_no_log }}"
#   vars_files:
#     - /etc/ansible/global_vars/all.yaml
#     # variable names lifted directly from [ansible-role-proxmox-create-lxc/defaults](https://github.com/UdelaRInterior/ansible-role-proxmox-create-lxc/blob/master/defaults/main.yml)
#     - /etc/ansible/global_vars/pve.yaml
#   vars:
#     molecule_inventory:
#       all:
#         hosts: {}
#         molecule: {}
  
#   tasks:

#     - name: Start the container
#       community.general.proxmox:
#         node: "{{ pve_node }}"
#         api_host: "{{ pve_api_host }}"
#         api_user: "{{ pve_api_user | default(omit) }}"
#         api_password: "{{ pve_api_password | default(omit) }}"
#         api_token_id: "{{ pve_api_token_id | default(omit) }}"
#         api_token_secret: "{{ pve_api_token_secret | default(omit) }}"
#         hostname: "{{ pve_hostname }}"
#         state: started
#       register: pve_status

#     - name: Fail if container has not started
#       when: >
#         item.changed is true and 
#         item.msg is match(".*started")
#       community.general.proxmox_vm_info:
#         vmid: "{{ item.container.vmid | int }}"
#         node: "{{ proxmox.node }}"
#         api_host: "{{ proxmox.uri }}"
#         api_user: "{{ proxmox.user }}"
#         api_password: "{{ proxmox.pass }}"
#       loop: "{{ containers.results }}"
#       register: pve_status


#     # Provide required inventory parameters, but also extend them to include integration test vars
#     - name: Add container to molecule_inventory
#       vars:
#         inventory_partial_yaml: |
#           all:
#             children:
#               molecule:
#                 hosts:
#                  "{{ pve_hostname }}":
#                     ansible_ssh_user: root
#                     ansible_ssh_host: "{{ item.pve_lxc_net_interfaces[0].ip | split('/') | first }}"
#                     ansible_pkg_mgr: "{{ pve_lxc_package_mgr }}"
#                     ansible_os_family: "{{ pve_lxc_os_family }}"
#                     ansible_distribution: "{{ pve_lxc_distribution }}"
#                     ansible_distribution_major_version: "{{ pve_lxc_major_version }}"
#                     ansible_distribution_file_variety: "{{ pve_lxc_file_variety }}"
#                     instance: "{{ item.name }}"
#                     address: "{{ item.pve_lxc_net_interfaces[0].ip | split('/') | first }}"
                    
#       ansible.builtin.set_fact:
#         molecule_inventory: >
#           {{ molecule_inventory | combine(inventory_partial_yaml | from_yaml, recursive=true) }}
#       loop: "{{ molecule_yml.platforms }}"
#       loop_control:
#         label: "{{ item.name }}"

#     - name: Dump molecule_inventory
#       ansible.builtin.copy:
#         content: |
#           {{ molecule_inventory | to_yaml }}
#         dest: "{{ molecule_ephemeral_directory }}/inventory/molecule_inventory.yml"
#         mode: "0600"

#     - name: Force inventory refresh
#       ansible.builtin.meta: refresh_inventory

#     - name: Fail if molecule group is missing
#       ansible.builtin.assert:
#         that: "'molecule' in groups"
#         fail_msg: |
#           molecule group was not found inside inventory groups: {{ groups }}
#       run_once: true # noqa: run-once[task]


#     # we want to avoid errors like "Failed to create temporary directory"
#     - name: Validate that inventory was refreshed
#       hosts: molecule
#       remote_user: root
#       gather_facts: false
#       tasks:
#         - name: pve_lxc wait for connection
#           ansible.builtin.wait_for_connection:
#             delay: 3
#             sleep: 3
#             timeout: "{{ pve_lxc_wait_for_connection_timeout | default(60) }}"
#           remote_user: "{{ pve_lxc_wait_for_connection_remote_user | default('root') }}"
